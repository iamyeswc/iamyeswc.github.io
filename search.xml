<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>go package 使用</title>
    <url>/posts/51187/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>环境：go version<br>go version go1.19.3 windows&#x2F;amd64</p>
<p>需要在main.go里导入自己写的包</p>
<p><img src="/images/goPackage.png" alt="项目结构"></p>
<p>在main.go里调用tempconv.go 出现error:</p>
<p>go run “d:\vsProject\gocode\main.go”<br>main.go:5:2: package tempconv is not in GOROOT (D:\soft\Go\src\tempconv)</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><ul>
<li><p>在go 1.11以前无法在除了root的目录下开发，1.11后提供了go mod来管理包</p>
</li>
<li><p>在同一目录下只能一个package</p>
</li>
</ul>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="GO-ENV"><a href="#GO-ENV" class="headerlink" title="GO ENV"></a>GO ENV</h2><p>设置GO111MODULE</p>
<p>on: 使用modules, 不会去gopath下查找</p>
<p>off: 不支持modules, 去gopath下查找</p>
<p>auto: 根据当前目录决定是否启动modules</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export GO111MODULE=off</span><br><span class="line">export GO111MODULE=on</span><br></pre></td></tr></table></figure>

<h3 id="winodows"><a href="#winodows" class="headerlink" title="winodows"></a>winodows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GO111MODULE=off</span><br><span class="line">set GO111MODULE=on</span><br></pre></td></tr></table></figure>

<p>或者设置系统环境变量</p>
<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>（1）关闭 go mod 模式：设置GO111MODULE off</p>
<p>（2）go env查看当前的GOPATH,  将需要导入的tempconv.go放入$GOPATH&#x2F;src下</p>
<p>note: 不建议这种方式，需要修改$GOPATH&#x2F;src</p>
<h2 id="GO-MOD"><a href="#GO-MOD" class="headerlink" title="GO MOD"></a>GO MOD</h2><p>（1）打开 go mod 模式：设置GO111MODULE off</p>
<p>（2）go mod init xx</p>
<p>（3）import xxx&#x2F;filename</p>
<p>go mod init gocode</p>
<p>项目结构：</p>
<p>gocode</p>
<p>—-module&#x2F;tempconv.go</p>
<p>—-main.go</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &quot;gocode/module&quot;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go package</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 常用命令</title>
    <url>/posts/64968/</url>
    <content><![CDATA[<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>切换不同文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:e filename </span><br></pre></td></tr></table></figure>

<p>dd 删除一行</p>
<p>gg dG 删除所有</p>
<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>main command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 拉image</span><br><span class="line">docker run 跑image</span><br><span class="line">docker ps 查看当前运行的image</span><br><span class="line">docker stop 停止container</span><br><span class="line">docker rm 删除container</span><br></pre></td></tr></table></figure>

<p>debug contaniner</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs [-f]  查看container的log</span><br><span class="line">docker exec -it containerId /bin/bash 进入容器  使用/bin/sh进入后,直接显示的是#，而使用/bin/bash直接显示的是root@xxxx:/#</span><br><span class="line">docker stat 查看容器资源的使用情况，CPU、内存、网络 I/O等</span><br><span class="line">docker inspect 查看容器控制的各种结构的详细信息</span><br></pre></td></tr></table></figure>

<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>把一个json文件在terminal pretty查看</p>
<p>(1) 使用python tool</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [file] | python3 -m json.tool </span><br></pre></td></tr></table></figure>

<p>(2) 使用jq 解析工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [file] | jq .</span><br></pre></td></tr></table></figure>

<p>jq还可以直接定位对应json中key的value</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat test.txt|jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;foo&quot;: &#123;</span><br><span class="line">    &quot;bar&quot;: &#123;</span><br><span class="line">      &quot;baz&quot;: 123</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat test.txt|jq &quot;.foo&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;bar&quot;: &#123;</span><br><span class="line">    &quot;baz&quot;: 123</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h1><p>在file.h中找到xxx代表的含义</p>
<p>In file.h</p>
<p>#define xxx “hello world”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep xxx file.h | cut -d &#x27;&quot;&#x27; -f2</span><br></pre></td></tr></table></figure>

<p>输出hello world，命令类似split用法，f1(#define xxx ) f2(hello world)</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>typedef 函数与函数指针的使用</title>
    <url>/posts/40855/</url>
    <content><![CDATA[<p>函数名是该函数的入口地址</p>
<p>函数指针：指向函数的指针，可以用来调用函数</p>
<h1 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>形式：typedef  返回类型(新类型)(参数列表)</p>
<p>（1）声明：新类型 *变量 (需要声明一个指针)</p>
<p>（2）初始化：变量 &#x3D; 函数返回地址</p>
<p>（3）使用：变量（参数列表）</p>
<p>此时的变量是一个指针，则可以指向一个函数的入口地址。可以将函数名赋值给该指针，来调用函数</p>
<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>形式：typedef  返回类型(*新类型)(参数列表)</p>
<p>（1）声明：新类型 变量</p>
<p>（2）初始化：变量 &#x3D; 函数返回地址</p>
<p>（3）使用：变量（参数列表）</p>
<p>此时的变量是直接就是一个指向函数的指针，可以将函数名赋值给该指针，来调用函数</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>typedef  函数: 就是重新定义了一个函数类型，如果需要调用则需要声明指向该函数类型的指针</li>
<li>typedef  函数指针: 是重新定义了一个指向函数类型的指针，要调用函数直接使用即可</li>
</ul>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*funPoint_t)</span><span class="params">(<span class="type">char</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(<span class="type">function_t</span>)</span><span class="params">(<span class="type">char</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f0</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;f0, c = %c\n&quot;</span>, c); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f1</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;f1, c = %c\n&quot;</span>, c); <span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    funPoint_t fp;<span class="comment">//fp是一个指向一个函数类型（返回的是int，参数是char）的函数指针</span></span><br><span class="line">    <span class="type">function_t</span> *fn;<span class="comment">//function_t是函数类型，所以fn是指向此函数类型的指针</span></span><br><span class="line"></span><br><span class="line">    fp = f0;</span><br><span class="line">    ret = <span class="built_in">fp</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//通过函数指针调用函数</span></span><br><span class="line"></span><br><span class="line">    fn = f1;</span><br><span class="line">    ret = <span class="built_in">fn</span>(<span class="string">&#x27;x&#x27;</span>);<span class="comment">//通过函数指针调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f0, c = a</span><br><span class="line">f1, c = x</span><br></pre></td></tr></table></figure>

<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>含义：使用者实现一个函数，将该函数作为参数传给调用者的函数中，由调用者的函数在运行时来调用的函数。</p>
<p>即别人函数调用过程中来回调你实现的函数</p>
<p>（1）定义了一个函数指针类型：helloWorldFunc （函数指针类型可以直接使用，因为它直接指向了函数的入口地址）</p>
<p>（2）将helloWorld作为参数传给callBack方法，其中callBack的第一个参数是一个函数指针类型</p>
<p>（3）在callBack中调用helloWorld</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*helloWorldFunc)</span><span class="params">(string buffer)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">helloWorld</span><span class="params">(string buffer)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;string is:%s&quot;</span>, buffer.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">callBack</span><span class="params">(helloWorldFunc fp, string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="built_in">fp</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *args[])</span></span>&#123;</span><br><span class="line">	string s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">//helloWorldFunc fp = helloWorld;</span></span><br><span class="line">    <span class="comment">//callBack(fp, s);</span></span><br><span class="line">    <span class="comment">//上面两行等价于下面这一行</span></span><br><span class="line">	<span class="built_in">callBack</span>(helloWorld, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>typedef</tag>
      </tags>
  </entry>
  <entry>
    <title>学习计划</title>
    <url>/posts/44479/</url>
    <content><![CDATA[<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><table>
<thead>
<tr>
<th>Summary</th>
<th>Tasks</th>
<th>Effort Estimastion</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>preparation（11月）</td>
<td>学习书籍</td>
<td>1 day</td>
<td>The Go Programming Language： <a href="https://gopl-zh.github.io/">https://gopl-zh.github.io/</a>     Go in action ebook</td>
</tr>
<tr>
<td></td>
<td>博客网站</td>
<td>5 days</td>
<td>hexo 搭建博客网站： <a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></td>
</tr>
<tr>
<td></td>
<td>笔记工具</td>
<td>2 day</td>
<td>Typora：所见即所得 <a href="https://zahui.fan/posts/64b52e0d/">https://zahui.fan/posts/64b52e0d/</a></td>
</tr>
<tr>
<td>knowledge（12月）</td>
<td>go基础知识(数据类型+函数)</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>方法+接口</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Goroutines ,Channels+并发</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>包+测试+反射</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td>practice（1月）</td>
<td>go项目练习（打包+工具链）</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>数组，切片+映射</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>类型系统</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td></td>
<td>并发</td>
<td>3 days</td>
<td></td>
</tr>
<tr>
<td>project</td>
<td>github： go web</td>
<td>15 days</td>
<td></td>
</tr>
</tbody></table>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><p>（1）博客评论</p>
<p>（2）ui menu 优化</p>
<p>（3）blog url link</p>
<p>（4）git push+git desktop</p>
<p>（5）hexo picture</p>
]]></content>
      <categories>
        <category>plan</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>acm</title>
    <url>/posts/50104/</url>
    <content><![CDATA[<h1 id="素数（埃拉托色尼筛法）"><a href="#素数（埃拉托色尼筛法）" class="headerlink" title="素数（埃拉托色尼筛法）"></a>素数（埃拉托色尼筛法）</h1><p>题目：给定一个数 n，打印所有小于或等于 n 的素数。</p>
<p>素数是恰好有两个不同的自然数约数的自然数：数字1和它本身，则素数不可能有因数</p>
<p>（1）2是最小的素数</p>
<p>（2）2的倍数则不是素数，将2的倍数的数字都进行标记</p>
<p>（3）按照这种方法标记所有数字，剩余没有标记的就是素数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrimeNumer</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="type">bool</span> prime[num + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">memset</span>(prime, <span class="literal">true</span>, num + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; (i * i) &lt; (num + <span class="number">1</span>); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i] == <span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt; (num + <span class="number">1</span>); j = j + i) &#123;</span><br><span class="line">				prime[j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span> ; i &lt; num + <span class="number">1</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(prime[i])</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *args[])</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line">	<span class="built_in">PrimeNumer</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output: 30以内的素数 2 3 5 7 11 13 17 19 23 29 </p>
<p>相关题目：给定两个整数 M 和 N，生成 M 和 N 之间的所有素数，包括 M 和 N。</p>
<p>解决方法，把第二个循环中取素数的范围改为（M,N), 如果M&lt;2, 则取的范围是从（2，N)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> begin = <span class="built_in">max</span>(M, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = begin ; i &lt; N + <span class="number">1</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">if</span>(prime[i])</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>geek link: <a href="https://practice.geeksforgeeks.org/problems/sieve-of-eratosthenes5242/1">https://practice.geeksforgeeks.org/problems/sieve-of-eratosthenes5242/1</a></p>
<h1 id="模运算中的幂"><a href="#模运算中的幂" class="headerlink" title="模运算中的幂"></a>模运算中的幂</h1><p>给三个数 x, y and p, 计算(x^y) % p. </p>
<p>（1）y如果是奇数，则把x先乘以res;</p>
<p>最后一个y肯定是1，把之前的结果都乘给res</p>
<p>（2）计算x^y时需要注意，如果x,y很大，取幂次方容易越界，导致结果为0</p>
<p>因此每次计算结果需要取余后再进行下一次幂运算</p>
<p>（2）y左移一位后，x取平方记录在原始值中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PowerInmod</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="comment">//y如果是奇数，则把x先乘以res;</span></span><br><span class="line">        <span class="comment">//最后一个y肯定是1，把之前的结果都乘给res</span></span><br><span class="line">		<span class="keyword">if</span>(y % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">			res = (res * x) % p; <span class="comment">//先取余是为了如果x,y很大，取幂次方容易越界，导致结果为0</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//y左移一位，x乘以2，结果都保留在x中</span></span><br><span class="line">		<span class="comment">//y = y &gt;&gt; 1; 等价于下面这一行</span></span><br><span class="line">		y = y / <span class="number">2</span>;</span><br><span class="line">		x = (x * x) % p; <span class="comment">//先取余是为了如果x,y很大，取幂次方容易越界，导致结果为0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *args[])</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">136</span>, y = <span class="number">926</span>, p = <span class="number">961</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="built_in">PowerInmod</span>(x, y, p);</span><br><span class="line">	cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:165</p>
<h1 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h1><p>题目：找到整数系数 x 和 y，使得： ax + by &#x3D; gcd(a, b) </p>
<p>欧几里得算法：两个正整数的最大公约数等于较小的数和两数的余数的最大公约数</p>
<p>gcd(a,b) &#x3D; gcd(b%a, a)</p>
<p>gcd(b%a, a) &#x3D; b%a x1 + a y1</p>
<p>ax + by &#x3D; b%a x1 + a y1</p>
<p>ax + by &#x3D; (b-(b&#x2F;a * a))x1 +  a y1</p>
<p>ax + by &#x3D; a (y1 - b&#x2F;a x1) + b x1</p>
<p>综上，</p>
<p>x &#x3D; (y1 - b&#x2F;a x1)</p>
<p>y &#x3D;  x1</p>
<p>每次递归求最大公约数的时候，更新x, y的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GcdExtend</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> *x, <span class="type">int</span> *y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</span><br><span class="line">		*x = <span class="number">0</span>;</span><br><span class="line">		*y = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x1, y1;</span><br><span class="line">	<span class="type">int</span> res = <span class="built_in">GcdExtend</span>(b%a, a, &amp;x1, &amp;y1);</span><br><span class="line">	*x = (y1 - (b/a) * x1);</span><br><span class="line">	*y = x1;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	<span class="type">int</span> gcd = <span class="built_in">GcdExtend</span>(a, b, &amp;x, &amp;y);</span><br><span class="line">	<span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt; &#123;gcd, x, y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *args[])</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	<span class="type">int</span> res = <span class="built_in">GcdExtend</span>(<span class="number">35</span>, <span class="number">15</span>, &amp;x, &amp;y);</span><br><span class="line">	cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output: 5</p>
]]></content>
  </entry>
  <entry>
    <title>slice 和 map 线程安全问题</title>
    <url>/posts/26211/</url>
    <content><![CDATA[<p><a name="i6r1s"></a></p>
<h1 id="slice和map底层结构与源码"><a href="#slice和map底层结构与源码" class="headerlink" title="slice和map底层结构与源码"></a>slice和map底层结构与源码</h1><ul>
<li>slice源码位置在$GOPATH&#x2F;src&#x2F;runtime&#x2F;slice.go</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">	array unsafe.Pointer</span><br><span class="line">	<span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line">	<span class="built_in">cap</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>slice结构类似vector, 底层是数组，传递的时候是传递的指针，长度和容量，是引用类型</p>
<ul>
<li>map源码位置在$GOPATH&#x2F;src&#x2F;runtime&#x2F;map.go</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bucketCntBits = <span class="number">3</span></span><br><span class="line">bucketCnt     = <span class="number">1</span> &lt;&lt; bucketCntBits</span><br><span class="line"></span><br><span class="line"><span class="comment">// A bucket for a Go map.</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// tophash generally contains the top byte of the hash value</span></span><br><span class="line">	<span class="comment">// for each key in this bucket. If tophash[0] &lt; minTopHash,</span></span><br><span class="line">	<span class="comment">// tophash[0] is a bucket evacuation state instead.</span></span><br><span class="line">	tophash [bucketCnt]<span class="type">uint8</span></span><br><span class="line">	<span class="comment">// Followed by bucketCnt keys and then bucketCnt elems.</span></span><br><span class="line">	<span class="comment">// <span class="doctag">NOTE:</span> packing all the keys together and then all the elems together makes the</span></span><br><span class="line">	<span class="comment">// code a bit more complicated than alternating key/elem/key/elem/... but it allows</span></span><br><span class="line">	<span class="comment">// us to eliminate padding which would be needed for, e.g., map[int64]int8.</span></span><br><span class="line">	<span class="comment">// Followed by an overflow pointer.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（1）map是数组存储的的，每个数组下标处存储的是一个bucket,这个bucket的类型见上面代码，每个bucket中可以存储8个kv键值对，当每个bucket存储的kv对到达8个之后，会通过overflow指针指向一个新的bucket，从而形成一个链表,看bmap的结构<br />（2）当往map中存储一个kv对时：<br />通过k获取hash值，hash值的低八位和bucket数组长度取余，定位到在数组中的那个下标<br />hash值的高八位存储在bucket中的tophash中，用来快速判断key是否存在<br />key和value的具体值则通过指针运算存储<br />当一个bucket满时，通过overfolw指针链接到下一个bucket<br /><img src="/images/goinaction5.png" alt="image.png"><br><a name="wcKIo"></a></p>
<h1 id="slice线程安全"><a href="#slice线程安全" class="headerlink" title="slice线程安全"></a>slice线程安全</h1><ul>
<li>多线程是slice是不安全的</li>
</ul>
<p>当容量不够，slice增长时，存在多线程竞争的问题：<br />下面这段代码for循环启动10个goroutine运行，每个goroutine向slice里添加一个元素a</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> slice []<span class="type">int</span></span><br><span class="line">	n := <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> sum <span class="type">int</span></span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line"></span><br><span class="line">	wg.Add(n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			sum++</span><br><span class="line">			slice = <span class="built_in">append</span>(slice, a)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;a:%d, len:%d, cap:%d, slice:%v\n&quot;</span>, a, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:<br /><img src="/images/goinaction6.png" alt="image.png"><br />运行看出，len(slice)不是预期的n，而小于了n<br />a&#x3D;7的时候， slice&#x3D;[9 4 5 6 7]<br />a&#x3D;3的时候，slice&#x3D;[9 4 5 6 3]<br />可以看出是在slice&#x3D;[9 4 5 6]时扩容，之前cap&#x3D;4, a&#x3D;7和a&#x3D;3的时候，同时扩容，将原来的9 4 5 6拷贝过来，并在新位置加上对应元素，两个goroutine同时运行，出现了索引位覆写问题<br />索引位覆写：同时修改相同索引位置的元素</p>
<p><a name="Et76t"></a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><a name="iHw87"></a></p>
<h3 id="goroutine等待其他goroutine完成任务"><a href="#goroutine等待其他goroutine完成任务" class="headerlink" title="goroutine等待其他goroutine完成任务"></a>goroutine等待其他goroutine完成任务</h3><p>for循环中对每个goroutine内部都增加了等待任务，必须等待其他goroutine完成才能继续执行，这样能安全的访问slice</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> slice []<span class="type">int</span></span><br><span class="line">    n := <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> sum <span class="type">int</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            sum++</span><br><span class="line">            slice = <span class="built_in">append</span>(slice, a)</span><br><span class="line">            fmt.Printf(<span class="string">&quot;a:%d, len:%d, cap:%d, slice:%v\n&quot;</span>, a, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">        &#125;(i)</span><br><span class="line">        wg.Wait()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:<br /><img src="/images/goinaction7.png" alt="image.png"><br />切片slice中相同索引下存放的值总是相同的<br><a name="Dy8hF"></a></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>所有goroutine阻塞，无法并发执行，影响性能<br><a name="vCGqm"></a></p>
<h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>对数据修改的时候加锁</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> slice []<span class="type">int</span></span><br><span class="line">	n := <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> sum <span class="type">int</span></span><br><span class="line">	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">	mutex := sync.Mutex&#123;&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line"></span><br><span class="line">	wg.Add(n)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> wg.Done()</span><br><span class="line">			mutex.Lock()</span><br><span class="line">			<span class="keyword">defer</span> mutex.Unlock()</span><br><span class="line">			sum++</span><br><span class="line">			slice = <span class="built_in">append</span>(slice, a)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;a:%d, len:%d, cap:%d, slice:%v\n&quot;</span>, a, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len:%d, cap:%d, slice:%v\n&quot;</span>, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), slice)</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:<br /><img src="/images/goinaction8.png" alt="image.png"><br />切片slice中相同索引下存放的值总是相同的<br><a name="aStln"></a></p>
<h1 id="map线程安全"><a href="#map线程安全" class="headerlink" title="map线程安全"></a>map线程安全</h1><ul>
<li>多线程是map是不安全的</li>
</ul>
<p>下面这段代码for循环启动10个goroutine运行，每个goroutine向map里添加一个元素a</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    n := <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> sum <span class="type">int</span></span><br><span class="line">    wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;len:%d, mp:%v\n&quot;</span>, <span class="built_in">len</span>(mp), mp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    wg.Add(n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            sum++</span><br><span class="line">            mp[a] = a</span><br><span class="line">            fmt.Printf(<span class="string">&quot;a:%d, len:%d, mp:%v\n&quot;</span>, a, <span class="built_in">len</span>(mp), mp)</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;len:%d, mp:%v\n&quot;</span>, <span class="built_in">len</span>(mp), mp)</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output:<br /><img src="/images/goinaction9.png" alt="image.png"><br />map线程不安全不能成功运行<br />解决方法和slice相似：加锁<br />修改后能成功运行</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go in action</tag>
      </tags>
  </entry>
  <entry>
    <title>goinactionChapter1-4</title>
    <url>/posts/47251/</url>
    <content><![CDATA[<h1 id="Go-语言介绍"><a href="#Go-语言介绍" class="headerlink" title="Go 语言介绍"></a>Go 语言介绍</h1><h2 id="开发速度"><a href="#开发速度" class="headerlink" title="开发速度"></a>开发速度</h2><p>编译器严格<br>（1）编译器只关注直接被引用的库（没有被引用的库编译器会报错）<br>（2）声明未使用的变量会报错，由类型检查<br>（3）内存管理由编译器处理</p>
<h2 id="支持并发"><a href="#支持并发" class="headerlink" title="支持并发"></a>支持并发</h2><p>goroutine类似线程，但使用内存少于线程<br>通过内置的数据结构通道(channel)让用户在不同goroutine间同步发送消息，而不是让多个goroutine争夺同一个数据的使用权<br>goroutine使用通道发送数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;sync&quot;</span><br><span class="line">)</span><br><span class="line">var wg sync.WaitGroup // 定义一个 WaitGroup 对象，用于等待一组 goroutine 的结束</span><br><span class="line">func printer(c chan int) &#123;</span><br><span class="line">    for i: = range c &#123; // 使用 for-range 循环读取 channel 中的数据，直到 channel 被关闭为止</span><br><span class="line">        fmt.Printf(&quot;receive i:%d &quot;, i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Done() // 计数减一</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">    c: = make(chan int) // 创建一个整型 channel</span><br><span class="line">    go printer(c) // 在新的 goroutine 中打印 channel 中的数据</span><br><span class="line">    wg.Add(1) // 增加一个计数器，表示有一个 goroutine 在运行</span><br><span class="line">    for i: = 1;i &lt; 10;i++&#123;</span><br><span class="line">        c &lt; -i // 将数字写入 channel</span><br><span class="line">    &#125;</span><br><span class="line">    close(c) // 关闭 channel，通知 goroutine 停止阻塞并退出</span><br><span class="line">    wg.Wait() // 等待所有 goroutine 完成</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/goinaction1.png" alt="image.png"><br>在两个goroutine间传输数据是同步的，在goroutine间安全传输数据的方法不需要任何锁和同步机制<br>但是通道是不提供跨goroutine的数据访问保护机制：<br>（1）传输数据是副本，goroutine各自持有副本修改是安全的<br>（2）传输数据是指向数据的指针，读和写由不同的goroutine完成的，每个goroutine需要额外的同步动作</p>
<h2 id="go语言的类型系统"><a href="#go语言的类型系统" class="headerlink" title="go语言的类型系统"></a>go语言的类型系统</h2><p>无继承的类型系统，支持面向对象开发</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>（1）在java里，设计需要围绕接口展开，必须满足接口里的所有约束，需要显示声明这个类实现了接口</p>
<ul>
<li>首先定义了一个 Shape 接口，其中只包含一个 getArea() 方法。</li>
<li>分别创建了 Circle 和 Rectangle 类，都实现了 Shape 接口，并实现了 getArea() 方法来计算它们的面积。</li>
<li>在 main() 函数中，创建了一个 Circle 对象和一个 Rectangle 对象，并将它们作为 Shape 类型的参数传递给 getArea() 函数，以计算它们的面积。<br>java使用接口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Shape &#123;</span><br><span class="line">    double getArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Circle implements Shape &#123;</span><br><span class="line">    private double radius;</span><br><span class="line"></span><br><span class="line">    public Circle(double radius) &#123;</span><br><span class="line">        this.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getArea() &#123;</span><br><span class="line">        return Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Rectangle implements Shape &#123;</span><br><span class="line">    private double width;</span><br><span class="line">    private double height;</span><br><span class="line"></span><br><span class="line">    public Rectangle(double width, double height) &#123;</span><br><span class="line">        this.width = width;</span><br><span class="line">        this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public double getArea() &#123;</span><br><span class="line">        return width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Shape c = new Circle(5);</span><br><span class="line">        Shape r = new Rectangle(3, 4);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;Circle area: &quot; + c.getArea());</span><br><span class="line">        System.out.println(&quot;Rectangle area: &quot; + r.getArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）在go里</p>
<ul>
<li>定义了两个结构体类型 Circle 和 Rectangle，并为它们分别定义了 area() 方法来计算它们的面积。</li>
</ul>
<p>Circle类型的方法和Rectangle类型的方法<br>（go里的函数和方法不同：函数是独立的代码块，没有属于特定类型，可以直接通过函数名进行调用<br>方法是与某个类型绑定的函数，可以被该类型的值或指针调用。方法通常用于描述该类型的行为和操作，并且可以访问该类型的成员变量。方法的定义需要在函数名前指定一个接收者参数，表示该方法属于哪个类型）</p>
<ul>
<li>定义了一个 Shape 接口，其中只包含一个 area() 方法。</li>
<li>在 getArea() 函数中，接收一个 Shape 类型的参数，并调用其 area() 方法来计算面积。</li>
<li>在 main() 函数中，创建了一个 Circle 类型的变量和一个 Rectangle 类型的变量，并分别将它们作为参数传递给 getArea() 函数。</li>
</ul>
<p>Circle 和 Rectangle 结构体类型并没有显式地声明它们实现了 Shape 接口，但由于它们都定义了 area() 方法，因此它们隐式地满足了 Shape 接口的要求。这就体现了Go语言中的“鸭子类型”特点，即只要一个结构体类型具备某个方法或操作，那么它就可以被看作具有相应接口的能力，无需显式地声明实现了该接口。</p>
<p>go使用接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type Circle struct &#123;</span><br><span class="line">    radius float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Rectangle struct &#123;</span><br><span class="line">    width, height float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(c Circle) area() float64 &#123;</span><br><span class="line">    return math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(r Rectangle) area() float64 &#123;</span><br><span class="line">    return r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Shape interface &#123;</span><br><span class="line">    area() float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func getArea(s Shape) float64 &#123;</span><br><span class="line">    return s.area()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    c: = Circle &#123;</span><br><span class="line">        radius: 5</span><br><span class="line">    &#125;</span><br><span class="line">    r: = Rectangle &#123;</span><br><span class="line">        width: 3,</span><br><span class="line">        height: 4</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(&quot;Circle area:&quot;, getArea(c))</span><br><span class="line">    fmt.Println(&quot;Rectangle area:&quot;, getArea(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tips: go online: <a href="https://go.dev/play/">https://go.dev/play/</a></p>
<h1 id="打包和工具链"><a href="#打包和工具链" class="headerlink" title="打包和工具链"></a>打包和工具链</h1><p>go语言的程序都会组织成若干组文件，每组文件被称为一个包<br>包名：<br>（1）使用包所在目录的名字 -&gt; 用户导入包的时候，能清晰知道包名<br>（2）全小写 -&gt; 有利于开发时频繁输入包名<br>（3）包名可以相同 -&gt; 导入包的时候使用全路径，可以区分同名的不同包</p>
<h3 id="main包"><a href="#main包" class="headerlink" title="main包"></a>main包</h3><p>（1）所有用go语言编译的可执行程序必须有一个名叫main的包<br>包名为main，一定也会有main函数，否则不会创建可执行文件 -&gt; main函数是程序入口<br>main包 里的go 源文件 都会被编译为二进制可执行文件<br>（2）不同目录下可以有多个 package main，但是同一目录下不能有多个 package main</p>
<h3 id="包导入"><a href="#包导入" class="headerlink" title="包导入"></a>包导入</h3><p>import (<br>“fmt”<br>“github.com&#x2F;spf12&#x2F;viper” &#x2F;&#x2F;远程导入<br>myfmt “mylib&#x2F;fmt”  &#x2F;&#x2F;命名导入<br>)<br>通过go module管理包（以前是在gopath环境变量目录下管理包）<br>go mod init modulename<br>go mod tidy -&gt; 查找下载依赖包</p>
<p>生成go.mod  go.sum</p>
<h3 id="函数init"><a href="#函数init" class="headerlink" title="函数init"></a>函数init</h3><p>每个包可以有多个init函数，这些函数在程序执行开始的时候被调用 -&gt; 在main函数之前执行<br>go语言要求不能导入不使用的包：<br>如果有init函数，但是该包里的内容没有被main函数使用，则使用空白标识符作为包的别名：<br>import (<br>“database&#x2F;sql”<br>_ “github.com&#x2F;goinaction&#x2F;code&#x2F;test”  &#x2F;&#x2F;避免编译错误<br>)</p>
<h3 id="使用go工具"><a href="#使用go工具" class="headerlink" title="使用go工具"></a>使用go工具</h3><p>编译： go build demo.go<br>清除编译生成文件： go clean<br>检查代码： go vet demo.go<br>代码格式化：go fmt demo.go</p>
<h1 id="数组，切片和映射"><a href="#数组，切片和映射" class="headerlink" title="数组，切片和映射"></a>数组，切片和映射</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>长度固定，存储一段相同类型的元素的连续块</p>
<h3 id="创建和初始化"><a href="#创建和初始化" class="headerlink" title="创建和初始化"></a>创建和初始化</h3><p>声明后类型和长度不能改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arry [5]int  -&gt; 声明时对应类型的零值来初始化</span><br><span class="line">var arry = [5]int&#123;1, 2, 3, 4, 5&#125; -&gt; 声明的时候初始化</span><br><span class="line">array := [5]int&#123;1,2,3,4,5&#125;  -&gt; 使用数组字面量声明数组</span><br><span class="line">array := [...]int&#123;1,2,3,4,5&#125;  -&gt; 自动计算声明数组长度</span><br><span class="line">array := [5]int&#123;1:10, 3:20&#125; -&gt; 声明数组，指定特定元素的值</span><br></pre></td></tr></table></figure>


<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>（1）访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array[2] = 25 -&gt; 访问数组元素，并修改对应索引元素的值</span><br></pre></td></tr></table></figure>

<p>（2）指针</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array := [5]*int -&gt; 仅声明未初始化 不能直接使用</span><br><span class="line">array := [5]*int&#123;&#125; -&gt; 声明并初始化为nil</span><br><span class="line">array := [5]*int&#123;0:new(int), 1:new(int)&#125; -&gt; 整型指针初始化索引0和1的数组元素</span><br></pre></td></tr></table></figure>

<p>（3）同类型互相赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var array1 [5]int</span><br><span class="line">array2 := [5]int&#123;1,2,3,4,5&#125;</span><br><span class="line">array1 = array2 -&gt; correct</span><br><span class="line">对比:</span><br><span class="line">var array1 [4]int</span><br><span class="line">array1 = array2 -&gt; not correct</span><br></pre></td></tr></table></figure>



<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>var array [4][2]int</p>
<h3 id="函数间传递数组"><a href="#函数间传递数组" class="headerlink" title="函数间传递数组"></a>函数间传递数组</h3><p>函数间传递变量，通过值传递，如果传递数组，会赋值整个数组的值  -&gt; 开销很大<br>solution: 传递指针，指针大小8字节 （64位系统） -&gt; 有效利用内存</p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>围绕动态数组构建，按需增长减小。底层内存是在连续块中分配内存，对底层数组进行了抽象<br>切片有三个字段的数据结构：<br>（1）指向底层数组的指针<br>（2）长度：切片访问的元素的个数 len函数<br>（3）容量：切片允许增长到的元素个数 cap函数</p>
<h3 id="创建和初始化-1"><a href="#创建和初始化-1" class="headerlink" title="创建和初始化"></a>创建和初始化</h3><p>make和切片字面量<br>tips : make 函数主要用于创建和初始化某些类型的内置数据结构，例如 slice、map 和 channel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slice := make([]int, 3, 5) -&gt; make 使用长度，容量初始化（容量可省略，此时长度和容量相同）</span><br><span class="line">切片能访问3个元素，底层数据拥有5个</span><br><span class="line">slice := make([]int, 3, 2) -&gt; make 使用长度大于容量，编译报错</span><br><span class="line">slice := []int&#123;1,2,3&#125;  -&gt; 切片字面量（不指定[]的值，基于初始化的元素个数确定长度和容量)</span><br></pre></td></tr></table></figure>

<p>数组和切片声明的区别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[]运算符里指定了值，创建的是数组 -&gt; slice := [3]int&#123;1,2,3&#125; -&gt; 三个元素的数组</span><br><span class="line">[]运算符里不指定值，创建的是切片 -&gt; slice := []int&#123;1,2,3&#125; -&gt; 长度容量都为3的切片</span><br></pre></td></tr></table></figure>

<p>声明空切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slice : = make([]int, 0)</span><br><span class="line">slice := []int&#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>(1)共享底层数组的两个切片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slice := []int&#123;10,20,30,40,50&#125;</span><br><span class="line">newSlice := slice[1:3]  -&gt; 用切片创建切片</span><br></pre></td></tr></table></figure>



<p><img src="/images/goinaction2.png" alt="image.png"><br>新切片slice[i:j]的长度和容量, 底层数组的容量k<br>长度：j-i<br>容量：k-i<br>修改切片内容 -&gt; newSlice[1] &#x3D; 35 -&gt;slice第三个元素被修改为35</p>
<p>(2)切片额外的容量<br>1）切片只能访问到长度内的元素<br>2）与切片的容量相关联的元素只能用于增长切片，在使用这部分元素前，要将其合并到切片长度里<br>如果不能把这些合并到切片长度里，这些容量就没有用处（可使用append做合并）</p>
<p>(3)切片增长<br>append会创建新的底层数组，把现有的值赋值到新数组里，再追加新的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slice := []int&#123;10,20,30,40&#125;</span><br><span class="line">newSlice := append(slice, 50)</span><br></pre></td></tr></table></figure>

<p>newSlice有用全新的底层数组，这个数组是原来容量的两倍<br><img src="/images/goinaction3.png" alt="image.png"><br>append只能处理底层数组的容量增长，容量小于1000，两倍增长。超过1000，增长因子1.25</p>
<p>(4)创建切片的3个索引<br>限制容量，为顶层数组提供保护，控制追加操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source := []string&#123;&quot;Apple&quot;, &quot;Orange&quot;, &quot;Plum&quot;, &#x27;Banana&quot;, &#x27;Grape&quot;&#125;</span><br><span class="line">slice := source[2:3:4]</span><br><span class="line">source[i:j:k]</span><br><span class="line">长度：j-i</span><br><span class="line">容量：k-i</span><br></pre></td></tr></table></figure>


<p><img src="/images/goinaction4.png" alt="image.png"><br>(5)迭代切片: range<br>for index, value :&#x3D; range slice{<br>}<br>range返回：迭代到的索引位置，对应位置元素的副本（副本无法取地址，使用该值变量的地址作为指向每个元素的指针地址是一样的：&amp;value的值是一样的 -&gt; 需要用&amp;slice[index]）<br>不需要的值可以用占位符_表示忽略 -&gt; for _, value :&#x3D; range slice</p>
<h3 id="多维切片"><a href="#多维切片" class="headerlink" title="多维切片"></a>多维切片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slice := [][]int&#123;&#123;10&#125;,&#123;20,30&#125;&#125;  可以利用创建复杂数据结构</span><br></pre></td></tr></table></figure>


<h3 id="函数间传递切片"><a href="#函数间传递切片" class="headerlink" title="函数间传递切片"></a>函数间传递切片</h3><p>切片以值得方式传递给函数，只复制切片本素，不复制底层数组，所以只需要24个字节：指针8个字节，长度和容量分别8字节。<br>因此切片效率高，如果函数需要修改数据，传递回一份新得切片副本即可</p>
<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>存储无序键值对</p>
<h3 id="创建和初始化-2"><a href="#创建和初始化-2" class="headerlink" title="创建和初始化"></a>创建和初始化</h3><p>使用make声明（key value都是string类型）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := make(map[string]string)</span><br></pre></td></tr></table></figure>

<p>创建并初始化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := map[string]string&#123;&quot;red&quot;:&quot;hello&quot;, &quot;yellow&quot;:&quot;world&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>映射的键不能是切片，包含切片的类型，函数的结构类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := map[[]string]string&#123;&#125; -&gt; 编译报错</span><br></pre></td></tr></table></figure>

<p>可以作为映射的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := map[string][]string&#123;&#125; -&gt; ok</span><br></pre></td></tr></table></figure>

<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>为映射赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := map[string]string&#123;&#125;</span><br><span class="line">dict[&quot;red&quot;] = &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p>未初始化的映射 -&gt; nil映射 -&gt; 赋值运行错误：nil映射不能用于存储键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict := map[string]string</span><br><span class="line">dict[&quot;red&quot;] = &quot;hello&quot;</span><br></pre></td></tr></table></figure>

<p>从映射获取值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value, exist := dict[&quot;red&quot;]  -&gt; 返回映射键对应的值和该值是否存在，如果键不存在，exist返回false</span><br><span class="line">value := dict[&quot;red&quot;]</span><br><span class="line">if value != &quot;&quot;        -&gt; 判断value是否是零值来看映射键是否存在</span><br></pre></td></tr></table></figure>

<p>range 迭代映射</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for key,value := range dict &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除映射中的一项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete(dict, &quot;red&quot;)</span><br></pre></td></tr></table></figure>

<p>映射的增长没有容量限制：可通过len函数得到映射长度</p>
<h3 id="在函数间传递映射"><a href="#在函数间传递映射" class="headerlink" title="在函数间传递映射"></a>在函数间传递映射</h3><p>函数间传递映射不会制造错该映射的副本，如果对映射修改，所有对这个映射的引用都会察觉。特性与切片类似，传递给函数成本很小，不会复制底层的数据结构</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go in action</tag>
      </tags>
  </entry>
  <entry>
    <title>goinactionChapter5-9</title>
    <url>/posts/48147/</url>
    <content><![CDATA[<p><a name="iK8Q8"></a></p>
<h1 id="Go语言的类型系统"><a href="#Go语言的类型系统" class="headerlink" title="Go语言的类型系统"></a>Go语言的类型系统</h1><p><a name="ErtT4"></a></p>
<h2 id="用户定义的类型"><a href="#用户定义的类型" class="headerlink" title="用户定义的类型"></a>用户定义的类型</h2><p><a name="zDp4h"></a></p>
<h3 id="struct创建结构类型"><a href="#struct创建结构类型" class="headerlink" title="struct创建结构类型"></a>struct创建结构类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name       <span class="type">string</span></span><br><span class="line">    email      <span class="type">string</span></span><br><span class="line">    ext        <span class="type">int</span></span><br><span class="line">    privileged <span class="type">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（1）使用<br />var bill user -&gt;  声明时总是会被初始化，结构里的每个字段都会用零值初始化（数值类型零值:0, 字符串零值：空字符串，布尔类型：false)<br />（2）note<br />var和 :&#x3D; 的区别<br />var是创建一个变量并初始化为其零值<br />:&#x3D; 结合字面量 可以将变量初始化为某个非零值(根据右侧的类型信息作为声明变量的类型）<br />eg: lisa :&#x3D; user{<br />name:”lisa”,<br />email:”<a href="mailto:&#x6c;&#105;&#115;&#x61;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#105;&#115;&#x61;&#x40;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a>“,<br />ext:123,<br />privileged:true,<br />} -&gt; 初始化结构类型 使用 结构字面量, 对字段声明顺序没有要求<br />lisa :&#x3D; user{“lisa”, “<a href="mailto:&#x6c;&#x69;&#115;&#97;&#x40;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#x6c;&#x69;&#115;&#97;&#x40;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#111;&#109;</a>“, 123, true} -&gt; 只有值，没有字段名，结尾不需要逗号，值得顺序要和结构类型一致<br />（3）使用用户自定义结构类型声明字段</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    person user</span><br><span class="line">    level  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fred := admin&#123;</span><br><span class="line">        person: user&#123;</span><br><span class="line">            name:       <span class="string">&quot;fred&quot;</span>,</span><br><span class="line">            email:      <span class="string">&quot;fred@email.com&quot;</span>,</span><br><span class="line">            ext:        <span class="number">456</span>,</span><br><span class="line">            privileged: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        level: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>初始化person字段是使用结构字面量创建了user类型的值<br><a name="AoAXq"></a></p>
<h3 id="基于已有的类型，作为新类型的类型说明"><a href="#基于已有的类型，作为新类型的类型说明" class="headerlink" title="基于已有的类型，作为新类型的类型说明"></a>基于已有的类型，作为新类型的类型说明</h3><p>Duration in time package<br /><img src="/images/goinaction10.png" alt="image.png"><br />int64是Duration的基础类型，但是go不认为int64和Duration是同一类型。Duration是一个独立的类型，编译器不会做隐式转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Duration <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> dur Duration</span><br><span class="line">    dur = <span class="type">int64</span>(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译报错：<br />cannot use int64(1000) (constant 1000 of type int64) as Duration value in assignment<br><a name="pu1lH"></a></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法是给用户定义的类型添加新的行为，在关键字func和方法名之间增加了一个参数<br />函数有接收者，就被称为方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how to declare methods and how the Go</span></span><br><span class="line"><span class="comment">// compiler supports them.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// user defines a user in the program.</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notify implements a method with a value receiver.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> notify() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending User Email To %s&lt;%s&gt;\n&quot;</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// changeEmail implements a method with a pointer receiver.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> changeEmail(email <span class="type">string</span>) &#123;</span><br><span class="line">    u.email = email</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Values of type user can be used to call methods</span></span><br><span class="line">    <span class="comment">// declared with a value receiver.</span></span><br><span class="line">    bill := user&#123;<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;bill@email.com&quot;</span>&#125;</span><br><span class="line">    bill.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pointers of type user can also be used to call methods</span></span><br><span class="line">    <span class="comment">// declared with a value receiver.</span></span><br><span class="line">    lisa := &amp;user&#123;<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;lisa@email.com&quot;</span>&#125;</span><br><span class="line">    lisa.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Values of type user can be used to call methods</span></span><br><span class="line">    <span class="comment">// declared with a pointer receiver.</span></span><br><span class="line">    bill.changeEmail(<span class="string">&quot;bill@newdomain.com&quot;</span>)</span><br><span class="line">    bill.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pointers of type user can be used to call methods</span></span><br><span class="line">    <span class="comment">// declared with a pointer receiver.</span></span><br><span class="line">    lisa.changeEmail(<span class="string">&quot;lisa@newdomain.com&quot;</span>)</span><br><span class="line">    lisa.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序声明了user结构类型</p>
<ul>
<li>使用值接收者实现方法: func (u user) notify()</li>
</ul>
<p>(1)user类型的值来调用方法<br />bill :&#x3D; user{“Bill”, “<a href="mailto:&#98;&#105;&#x6c;&#x6c;&#64;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;">&#98;&#105;&#x6c;&#x6c;&#64;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a>“} <br />bill.notify()<br />(2)user类型的指针调用方法<br />lisa :&#x3D; &amp;user{“Lisa”, “<a href="mailto:&#108;&#x69;&#x73;&#97;&#64;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#108;&#x69;&#x73;&#97;&#64;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a>“} <br />lisa.notify() <br />go语言调整指针的值来符合方法的定义-&gt; (*lisa).notify()</p>
<ul>
<li>使用指针接收者实现方法: func (u *user) changeEmail(email string)</li>
</ul>
<p>(1)user类型的指针调用方法<br />lisa :&#x3D; &amp;user{“Lisa”, “<a href="mailto:&#108;&#105;&#115;&#x61;&#64;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#108;&#105;&#115;&#x61;&#64;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>“}<br />lisa.changeEmail(“<a href="mailto:&#108;&#105;&#x73;&#x61;&#64;&#x6e;&#x65;&#119;&#100;&#111;&#x6d;&#97;&#x69;&#110;&#x2e;&#x63;&#111;&#109;">&#108;&#105;&#x73;&#x61;&#64;&#x6e;&#x65;&#119;&#100;&#111;&#x6d;&#97;&#x69;&#110;&#x2e;&#x63;&#111;&#109;</a>“)<br />(2)user类型的值来调用方法<br />bill :&#x3D; user{“Bill”, “<a href="mailto:&#x62;&#x69;&#108;&#x6c;&#x40;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x62;&#x69;&#108;&#x6c;&#x40;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>“} <br />bill.changeEmail(“<a href="mailto:&#98;&#105;&#108;&#x6c;&#64;&#110;&#x65;&#119;&#100;&#111;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#99;&#x6f;&#x6d;">&#98;&#105;&#108;&#x6c;&#64;&#110;&#x65;&#119;&#100;&#111;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#99;&#x6f;&#x6d;</a>“)<br />go语言调整值来符合方法的定义-&gt; （&amp;bill).changeEmail(“<a href="mailto:&#x62;&#105;&#108;&#108;&#64;&#x6e;&#x65;&#x77;&#x64;&#111;&#109;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#x6d;">&#x62;&#105;&#108;&#108;&#64;&#x6e;&#x65;&#x77;&#x64;&#111;&#109;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#x6d;</a>“)</p>
<ul>
<li>go语言的两种类型的接收者:</li>
</ul>
<p>(1)值接收者：调用时使用值得副本来执行<br />适用于创建新的值<br />(2）指针接收者：调用时使用实际值来执行<br />适用于修改当前值<br><a name="FnnPK"></a></p>
<h2 id="类型的本质"><a href="#类型的本质" class="headerlink" title="类型的本质"></a>类型的本质</h2><p>关注值的本质<br><a name="mZuZW"></a></p>
<h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p>数值类型，字符串类型，布尔类型<br />把这些类型的值传递给方法或者函数时，传递的是对应值的副本</p>
<p><a name="pfwjS"></a></p>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>切片，映射，通道，接口，函数类型(type MyFunc func(int, int) int<br />)<br />引用类型都包含一组独特的字段，用于管理底层数据结构。因此通过复制来传递一个引用类型的副本，本质是共享底层数据结构</p>
<ul>
<li>编译器只允许为命名的用户定义的类型声明方法：</li>
</ul>
<p>(1)因为未命名类型没有独立的命名空间，无法与其他代码分开管理。<br />(2)应该使用具名类型来管理代码并添加方法。当我们声明一个结构体或接口时，我们可以向其中添加方法，以便更好地管理该类型的行为。这些方法只能在类型所属的包中使用，并且必须通过该类型来调用</p>
<p><a name="tEmP7"></a></p>
<h3 id="结构类型"><a href="#结构类型" class="headerlink" title="结构类型"></a>结构类型</h3><p>结构类型用来描述一组数据值，这组值得本质可以是原始的，也可以是非原始的<br><a name="DwqKi"></a></p>
<h4 id="原始的类型的结构类型"><a href="#原始的类型的结构类型" class="headerlink" title="原始的类型的结构类型"></a>原始的类型的结构类型</h4><p>time package里的Time类型是原始的<br /><img src="/images/goinaction11.png" alt="image.png"><br /><img src="/images/goinaction12.png" alt="image.png"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add returns the time t+d.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span> Add(d Duration) Time &#123;</span><br><span class="line">    dsec := <span class="type">int64</span>(d / <span class="number">1e9</span>)</span><br><span class="line">    nsec := t.nsec() + <span class="type">int32</span>(d%<span class="number">1e9</span>)</span><br><span class="line">    <span class="keyword">if</span> nsec &gt;= <span class="number">1e9</span> &#123;</span><br><span class="line">        dsec++</span><br><span class="line">        nsec -= <span class="number">1e9</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> nsec &lt; <span class="number">0</span> &#123;</span><br><span class="line">        dsec--</span><br><span class="line">        nsec += <span class="number">1e9</span></span><br><span class="line">    &#125;</span><br><span class="line">    t.wall = t.wall&amp;^nsecMask | <span class="type">uint64</span>(nsec) <span class="comment">// update nsec</span></span><br><span class="line">    t.addSec(dsec)</span><br><span class="line">    <span class="keyword">if</span> t.wall&amp;hasMonotonic != <span class="number">0</span> &#123;</span><br><span class="line">        te := t.ext + <span class="type">int64</span>(d)</span><br><span class="line">        <span class="keyword">if</span> d &lt; <span class="number">0</span> &amp;&amp; te &gt; t.ext || d &gt; <span class="number">0</span> &amp;&amp; te &lt; t.ext &#123;</span><br><span class="line">            <span class="comment">// Monotonic clock reading now out of range; degrade to wall-only.</span></span><br><span class="line">            t.stripMono()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t.ext = te</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Time类型的方法，使用值接收者，传入Time值得副本，返回了方法内得Time值得副本<br><a name="RA0Oh"></a></p>
<h4 id="非原始的类型的结构类型"><a href="#非原始的类型的结构类型" class="headerlink" title="非原始的类型的结构类型"></a>非原始的类型的结构类型</h4><p>os package里的File类型是非原始的<br /><img src="/images/goinaction13.png" alt="image.png"><br /><img src="/images/goinaction14.png" alt="image.png"><br />File类型使用了嵌入的指针，指向未公开的类型，这层额外的内嵌类型组织了复制<br />在对File类型进行复制时，只会复制<em>file指针本身，而不会复制指向的file类型数据。这意味着，复制后的File类型和原始的File类型将共享同一个</em>file指针，并且对其中一个的修改也会影响到另一个<br />函数：<br />调用者得到指向File类型值得指针-&gt; 说明被返回得值是非原始得<br /><img src="/images/goinaction15.png" alt="image.png"></p>
<p>方法：<br />没有修改接收者得值，但是使用指针接收者来声明<br /><img src="/images/goinaction16.png" alt="image.png"></p>
<p>总结：<br />（1）即使函数或者方法没有直接改变非原始得值得状态，依旧应该使用共享得方式传递，因为对应类型得数据是非原始得，应该总是被共享，而不是复制</p>
<p>（2）使用值接收者还是指针接收者，不应该由方法是否修改了接收到得值来决定，应该基于类型的本质（除了让类型值符合接口的时候）</p>
<p><a name="nuADR"></a></p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>多态： 代码可以更具类型的具体实现采取不同行为的能力<br />如果一个类型实现了某个接口，所有使用这个接口的地方，都可以支持这种类型的值<br />eg：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how to write a simple version of curl using</span></span><br><span class="line"><span class="comment">// the io.Reader and io.Writer interface support.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// init is called before main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Usage: ./example2 &lt;url&gt;&quot;</span>)</span><br><span class="line">        os.Exit(<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Get a response from the web server.</span></span><br><span class="line">    r, err := http.Get(os.Args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copies from the Body to Stdout.</span></span><br><span class="line">    io.Copy(os.Stdout, r.Body)</span><br><span class="line">    <span class="keyword">if</span> err := r.Body.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>copy 函数接收io.Reader接口类型的值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> copyBuffer(dst, src, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>r.Body 是 io.ReadCloser接口类型的值，实现了Reader接口，因此可以传入io.Copy方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadCloser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（1）接口是用来定义行为的类型，这些被定义的行为不由接口直接实现，而是通过<strong>方法</strong>由<strong>用户定义的类型</strong>实现<br />（2）用户定义的类型实现了某个接口类型声明的一组方法，那么这个用户定义的类型的值就可以赋给这个接口类型的值<br />（3）对接口值方法的调用会执行接口值里存储的用户定义的类型的值的对应的方法 -&gt; 任何用户定义的类型都可以实现任何接口 -&gt; 对接口值方法的调用就是一种多态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notifier 是一个接口类型，表示可以向外部发送通知</span></span><br><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> &#123;</span><br><span class="line">    notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// user 是一个结构体类型，表示用户</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 notifier 接口的 notify 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span></span> notify() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending notification to user %s\n&quot;</span>, u.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 声明一个 notifier 类型变量 n，赋值为一个 user 类型变量</span></span><br><span class="line">    <span class="keyword">var</span> n notifier</span><br><span class="line">    n = user&#123;<span class="string">&quot;Bill&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 notifier 接口中定义的 notify 方法，输出 &quot;Sending notification to user Bill&quot;</span></span><br><span class="line">    n.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="ACZpK"></a></p>
<h4 id="将实体值赋值给接口"><a href="#将实体值赋值给接口" class="headerlink" title="将实体值赋值给接口"></a>将实体值赋值给接口</h4><p>var n notifier<br /> n &#x3D; user{“Bill”}<br />user类型值赋值后接口变量的值的内部布局：<br />notifier是一个两个字长度的数据结构<br />第一个是指向内部表（iTable）的指针 ： 包含<strong>已存储的值的类型的信息</strong>和与这个值关联的一组方法<br />第二个是一个指向所存储值的指针<br /><img src="/images/goinaction17.png" alt="image.png"><br><a name="yxlbW"></a></p>
<h4 id="将实体指针赋值给接口"><a href="#将实体指针赋值给接口" class="headerlink" title="将实体指针赋值给接口"></a>将实体指针赋值给接口</h4><p>var n notifier<br /> n &#x3D; &amp;user{“Bill”}<br />第一个是指向内部表（iTable）的指针 ：<strong>存储一个指向保存的类型的指针</strong>和与这个值关联的一组方法<br />第二个是一个指向所存储值的指针<br /><img src="/images/goinaction18.png" alt="image.png"><br><a name="M0ZpL"></a></p>
<h4 id="方法集"><a href="#方法集" class="headerlink" title="方法集"></a>方法集</h4><p>方法集定义了接口的接受规则，定义了一组关联到给定类型的值或者指针的方法<br /><img src="/images/goinaction19.png" alt="image.png"><br />（1）如果使用指针接收者来实现一个接口，那么只有指向该类型的指针才能实现对应的接口<br />（2）如果使用值接收者来实现一个接口，那么该类型的值和指针都能实现对应的接口</p>
<p>第一条限制存在的原因:<br />编译器不能总是自动获取一个值的地址？？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how you can&#x27;t always get the</span></span><br><span class="line"><span class="comment">// address of a value.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// duration is a type with a base type of int.</span></span><br><span class="line"><span class="keyword">type</span> duration <span class="type">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// format pretty-prints the duration value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *duration)</span></span> pretty() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Duration: %d&quot;</span>, *d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    duration(<span class="number">42</span>).pretty()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ./listing46.go:17: cannot call pointer method on duration(42)</span></span><br><span class="line">    <span class="comment">// ./listing46.go:17: cannot take the address of duration(42)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/goinaction20.png" alt="image.png"><br />duration(42).pretty()<br />改成这样就可以<br />var dur &#x3D; duration(42)<br />dur.pretty()</p>
<p>原因：值类型不能被寻址<br /> duration(42)返回的值是右值，当调用指针接收者的方法时，编译器试图给其插入取地址符，未果，就只能报错了。<br />左值和右值：最重要区别就是是否可以被寻址<br />可以被寻址的是左值，既可以出现在赋值号左边也可以出现在右边；<br />不可以被寻址的即为右值，比如函数返回值、字面值、常量值等等，只能出现在赋值号右边。</p>
<p><a name="aBjVc"></a></p>
<h3 id="嵌入类型"><a href="#嵌入类型" class="headerlink" title="嵌入类型"></a>嵌入类型</h3><p>(1)允许用户扩展或修改已有类型的行为，将已有的类型直接声明在新的结构类型里<br />(2)被嵌入的类型被称为新的外部类型的内部类型<br />(3)通过嵌入类型，与外部类型相关的标识符会提升到外部类型上</p>
<ul>
<li>外部类型就<strong>组合</strong>了<strong>内部类型</strong>包含的所有<strong>属性</strong>，并可以<strong>添加</strong>新的字段和方法</li>
<li>外部类型也可以通过声明与内部标识符<strong>同名</strong>的标识符来<strong>覆盖内部标识符</strong>的字段或方法</li>
</ul>
<p>嵌入一个类型，只需要声明这个类型的名字即可：不指定内部类型对应的字段名，也可以使用内部类型的类型名，来访问到内部类型的值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how to embed a type into another type and</span></span><br><span class="line"><span class="comment">// the relationship between the inner and outer type.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// user defines a user in the program.</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notify implements a method that can be called via</span></span><br><span class="line"><span class="comment">// a value of type user.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> notify() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending user email to %s&lt;%s&gt;\n&quot;</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// admin represents an admin user with privileges.</span></span><br><span class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    user  <span class="comment">// Embedded Type</span></span><br><span class="line">    level <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create an admin user.</span></span><br><span class="line">    ad := admin&#123;</span><br><span class="line">        user: user&#123;</span><br><span class="line">            name:  <span class="string">&quot;john smith&quot;</span>,</span><br><span class="line">            email: <span class="string">&quot;john@yahoo.com&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        level: <span class="string">&quot;super&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// We can access the inner type&#x27;s method directly.</span></span><br><span class="line">    ad.user.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The inner type&#x27;s method is promoted.</span></span><br><span class="line">    ad.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用是通过直接访问内部类型user -&gt; 内部类型存在于外部类型内，总是可访问的<br />ad.user.notify()<br />内部类型的方法提升到外部类型，直接调用<br />ad.notify()</p>
<p>外部类型不需要使用内部类型的实现，想使用自己的一套实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show what happens when the outer and inner</span></span><br><span class="line"><span class="comment">// type implement the same interface.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notifier is an interface that defined notification</span></span><br><span class="line"><span class="comment">// type behavior.</span></span><br><span class="line"><span class="keyword">type</span> notifier <span class="keyword">interface</span> &#123;</span><br><span class="line">    notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// user defines a user in the program.</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="type">string</span></span><br><span class="line">    email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notify implements a method that can be called via</span></span><br><span class="line"><span class="comment">// a value of type user.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *user)</span></span> notify() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending user email to %s&lt;%s&gt;\n&quot;</span>,</span><br><span class="line">        u.name,</span><br><span class="line">        u.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// admin represents an admin user with privileges.</span></span><br><span class="line"><span class="keyword">type</span> admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    user</span><br><span class="line">    level <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// notify implements a method that can be called via</span></span><br><span class="line"><span class="comment">// a value of type Admin.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *admin)</span></span> notify() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending admin email to %s&lt;%s&gt;\n&quot;</span>,</span><br><span class="line">        a.name,</span><br><span class="line">        a.email)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create an admin user.</span></span><br><span class="line">    ad := admin&#123;</span><br><span class="line">        user: user&#123;</span><br><span class="line">            name:  <span class="string">&quot;john smith&quot;</span>,</span><br><span class="line">            email: <span class="string">&quot;john@yahoo.com&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        level: <span class="string">&quot;super&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send the admin user a notification.</span></span><br><span class="line">    <span class="comment">// The embedded inner type&#x27;s implementation of the</span></span><br><span class="line">    <span class="comment">// interface is NOT &quot;promoted&quot; to the outer type.</span></span><br><span class="line">    sendNotification(&amp;ad)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// We can access the inner type&#x27;s method directly.</span></span><br><span class="line">    ad.user.notify()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The inner type&#x27;s method is NOT promoted.</span></span><br><span class="line">    ad.notify()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// sendNotification accepts values that implement the notifier</span></span><br><span class="line"><span class="comment">// interface and sends notifications.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendNotification</span><span class="params">(n notifier)</span></span> &#123;</span><br><span class="line">    n.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>admin类型增加了对notifier接口的实现 -&gt; 接口嵌入的内部类型实现没有提升到外部类型<br />ad.user.notify() -&gt; 调用内部类型user的方法<br />ad.notify() -&gt; 调用外部类型admin的方法</p>
<p>总结：<br />（1）外部类型实现了和内部类型同名的方法，则内部类型的实现就不会被提升<br />（2）但是内部类型的值一直在，可以直接访问内部类型的值，来访问没有被提升的内部类型实现的方法<br><a name="GZwLO"></a></p>
<h3 id="公开或未公开的标识符"><a href="#公开或未公开的标识符" class="headerlink" title="公开或未公开的标识符"></a>公开或未公开的标识符</h3><p>go语言支持从包里公开或者隐藏标识符<br />标识符名字以<strong>小写</strong>字母开头：标识符未公开，包外的代码<strong>不可见</strong><br />标识符名字以<strong>大写</strong>字母开头：标识符公开，包外的代码<strong>可见</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> counters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// alertCounter is an unexported type that</span></span><br><span class="line"><span class="comment">// contains an integer counter for alerts.</span></span><br><span class="line"><span class="keyword">type</span> alertCounter <span class="type">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// New creates and returns values of the unexported</span></span><br><span class="line"><span class="comment">// type alertCounter.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(value <span class="type">int</span>)</span></span> alertCounter &#123;</span><br><span class="line">    <span class="keyword">return</span> alertCounter(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/goinaction/code/chapter5/listing68/counters&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a variable of the unexported type using the exported</span></span><br><span class="line">    <span class="comment">// New function from the package counters.</span></span><br><span class="line">    counter := counters.New(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Counter: %d\n&quot;</span>, counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>type alertCounter int -&gt; 小写的标识符未公开<br />New 工厂函数创建了未公开类型的值，将这个值返回给调用者（？）<br />原因: alertCounter类型的值是一个具体的值，而不是一个类型。因此，虽然alertCounter类型本身是未公开的，但是它的值并没有被限制在包内部<br />书上：</p>
<ul>
<li>公开或者未公开的标识符，不是一个值</li>
<li>短变量声明操作符，有能力捕获引用的类型</li>
</ul>
<p>嵌入类型+未公开标识符的使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Package entities contains support for types of</span></span><br><span class="line"><span class="comment">// people in the system.</span></span><br><span class="line"><span class="keyword">package</span> entities</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// user defines a user in the program.</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="type">string</span></span><br><span class="line">    Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Admin defines an admin in the program.</span></span><br><span class="line"><span class="keyword">type</span> Admin <span class="keyword">struct</span> &#123;</span><br><span class="line">    user   <span class="comment">// The embedded type is unexported.</span></span><br><span class="line">    Rights <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how unexported fields from an exported</span></span><br><span class="line"><span class="comment">// struct type can&#x27;t be accessed directly.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;github.com/goinaction/code/chapter5/listing74/entities&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a value of type Admin from the entities package.</span></span><br><span class="line">    a := entities.Admin&#123;</span><br><span class="line">        Rights: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the exported fields from the unexported</span></span><br><span class="line">    <span class="comment">// inner type.</span></span><br><span class="line">    a.Name = <span class="string">&quot;Bill&quot;</span></span><br><span class="line">    a.Email = <span class="string">&quot;bill@email.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;User: %v\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Admin类型的内部类型user是未公开的，无法直接通过结构字面量初始化改内部类型</li>
<li>虽然内部类型是未公开的，但是内部类型里声明的字段是公开的</li>
<li>内部类型的标识符提升到外部类型，这些公开的字段可以通过外部类型访问到<br><a name="lMpA2"></a></li>
</ul>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p><a name="Rw40X"></a></p>
<h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p>go语言里的并发是指能让某个函数独立于其他函数运行的能力。<br />当一个函数创建为goroutine时，Go会将其视为一个独立的工作单元。</p>
<p><img src="/images/goinaction21-0.png" alt="image.png"><img src="/images/goinaction21-1.png" alt="image.png"></p>
<ul>
<li>创建一个goroutine就会被放到调度器的全局运行队列中</li>
<li>调度器就将这些队列中的goroutine分配给一个逻辑处理器，并放到这个逻辑处理器对应的本地运行队列中</li>
<li>本地运行队列中的goroutine一直等待直到自己被分配的逻辑处理器执行</li>
</ul>
<p>goroutine执行阻塞的系统调用：打开文件<br />分离-&gt; 线程阻塞 -&gt; 等待系统调用的返回</p>
<p>并发：让不同的代码片段同时在不同的物理处理器上执行，同时管理很多事情<br />并行：同时做很多事情<br />goroutine并行，需要多于一个逻辑处理器，可以在不同的线程上运行<br />一个逻辑处理器和两个逻辑处理器的区别：<br /><img src="/images/goinaction22-0.png" alt="image.png"><img src="/images/goinaction22-1.png" alt="image.png"><br><a name="FCjHV"></a></p>
<h2 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h2><p><a name="ABoHb"></a></p>
<h3 id="goroutine并发"><a href="#goroutine并发" class="headerlink" title="goroutine并发"></a>goroutine并发</h3><p><a name="QfC1S"></a></p>
<h4 id="一个逻辑处理器并发运行多个goroutine"><a href="#一个逻辑处理器并发运行多个goroutine" class="headerlink" title="一个逻辑处理器并发运行多个goroutine"></a>一个逻辑处理器并发运行多个goroutine</h4><ul>
<li>runtime.GOMAXPROCS(1) 设置逻辑处理器数量是1</li>
<li>WaitGroup是一个计数信号量，用来记录并维护运行的goroutine</li>
<li>如果WaitGroup的值大于0，Wait方法就会阻塞</li>
<li>当代码中函数通过goroutine执行，main代码会继续运行，这样main函数会在goroutine完成工作前返回，程序就有可能在goroutine运行前种植，因此main函数需要通过WaitGroup来等待goroutine完成工作</li>
<li>当goroutine占用时间过长时，调度器会停止当前正运行的goroutine，并给其他可运行的goroutine运行的机会</li>
</ul>
<p><img src="/images/goinaction23.png" alt="image.png"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how the goroutine scheduler</span></span><br><span class="line"><span class="comment">// will time slice goroutines on a single thread.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wg is used to wait for the program to finish.</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for all Go programs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Allocate 1 logical processors for the scheduler to use.</span></span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a count of two, one for each goroutine.</span></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create two goroutines.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Create Goroutines&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> printPrime(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> printPrime(<span class="string">&quot;B&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for the goroutines to finish.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Waiting To Finish&quot;</span>)</span><br><span class="line">    wg.Wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Terminating Program&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// printPrime displays prime numbers for the first 5000 numbers.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printPrime</span><span class="params">(prefix <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Schedule the call to Done to tell main we are done.</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">next:</span><br><span class="line">    <span class="keyword">for</span> outer := <span class="number">2</span>; outer &lt; <span class="number">5000</span>; outer++ &#123;</span><br><span class="line">        <span class="keyword">for</span> inner := <span class="number">2</span>; inner &lt; outer; inner++ &#123;</span><br><span class="line">            <span class="keyword">if</span> outer%inner == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span> next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s:%d\n&quot;</span>, prefix, outer)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Completed&quot;</span>, prefix)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/goinaction24.png" alt="image.png"><br />调度器切换两个goroutine<br><a name="RLPjm"></a></p>
<h3 id="goroutine并行"><a href="#goroutine并行" class="headerlink" title="goroutine并行"></a>goroutine并行</h3><p>import runtime<br />runtime.GOMAXPROCS(runtime.NumCPU())</p>
<ul>
<li>runtime包修改Go语言运行时配置参数的能力</li>
<li>修改调度器使用的逻辑处理器的数量 -&gt; 为每个可用的物理处理器创建一个逻辑处理器</li>
<li>有多个逻辑处理器 且 可以同时让每个逻辑处理器运行在一个可用的物理处理器上， goroutine才会并行运行<br><a name="bDSTk"></a></li>
</ul>
<h3 id="竞争状态"><a href="#竞争状态" class="headerlink" title="竞争状态"></a>竞争状态</h3><p>两个goroutine没有互相同步（互斥锁，通道，条件锁）下，访问某个共享的资源，并试图读写这个资源，就会处于互相竞争的状态</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how to create race</span></span><br><span class="line"><span class="comment">// conditions in our programs. We don&#x27;t want to do this.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    <span class="comment">// counter is a variable incremented by all goroutines.</span></span><br><span class="line">    counter <span class="type">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// wg is used to wait for the program to finish.</span></span><br><span class="line">    wg sync.WaitGroup</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for all Go programs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Add a count of two, one for each goroutine.</span></span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create two goroutines.</span></span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> incCounter(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for the goroutines to finish.</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;Final Counter:&quot;</span>, counter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// incCounter increments the package level counter variable.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Schedule the call to Done to tell main we are done.</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">        <span class="comment">// Capture the value of Counter.</span></span><br><span class="line">        value := counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Yield the thread and be placed back in queue.</span></span><br><span class="line">        runtime.Gosched()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increment our local value of Counter.</span></span><br><span class="line">        value++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Store the value back into Counter.</span></span><br><span class="line">        counter = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/goinaction25.png" alt="image.png"></p>
<ul>
<li>counter是进行四次读写操作，每个goroutine执行两次</li>
<li>runtime.Gosched()将goroutine从当前线程退出，给其他goroutine运行</li>
<li>用竞争检测器标志来编译程序</li>
</ul>
<p>go build -race<br />.&#x2F;test &#x2F;&#x2F;运行<br /><img src="/images/goinaction26.png" alt="image.png"><br><a name="Zsr79"></a></p>
<h3 id="锁住共享资源"><a href="#锁住共享资源" class="headerlink" title="锁住共享资源"></a>锁住共享资源</h3><p>同步机制 : 对共享资源加锁<br><a name="uTSJs"></a></p>
<h4 id="原子函数"><a href="#原子函数" class="headerlink" title="原子函数"></a>原子函数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Schedule the call to Done to tell main we are done.</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">        <span class="comment">// Safely Add One To Counter.</span></span><br><span class="line">        atomic.AddInt64(&amp;counter, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Yield the thread and be placed back in queue.</span></span><br><span class="line">        runtime.Gosched()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>atmoic</p>
<ul>
<li>AddInt64同步整型的加法</li>
<li>LoadInt64安全读整型值</li>
<li>StoreInt64安全写整型值<br><a name="qjuEs"></a></li>
</ul>
<h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>在代码上创建一个临界区，保证同一时间只有一个goroutine可以执行这个临界区代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incCounter</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Schedule the call to Done to tell main we are done.</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count := <span class="number">0</span>; count &lt; <span class="number">2</span>; count++ &#123;</span><br><span class="line">        <span class="comment">// Only allow one goroutine through this</span></span><br><span class="line">        <span class="comment">// critical section at a time.</span></span><br><span class="line">        mutex.Lock()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Capture the value of counter.</span></span><br><span class="line">            value := counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Yield the thread and be placed back in queue.</span></span><br><span class="line">            runtime.Gosched()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Increment our local value of counter.</span></span><br><span class="line">            value++</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Store the value back into counter.</span></span><br><span class="line">            counter = value</span><br><span class="line">        &#125;</span><br><span class="line">        mutex.Unlock()</span><br><span class="line">        <span class="comment">// Release the lock and allow any</span></span><br><span class="line">        <span class="comment">// waiting goroutine through.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="EQIQW"></a></p>
<h4 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h4><p>可以在goroutine间做同步</p>
<ul>
<li>使用make创建通道(参数chan+允许通道交换的类型）</li>
</ul>
<p>（1）无缓冲通道：unbuffered :&#x3D; make(chan int)<br />需要发送goroutine和接收goroutine都准备好，才能完成发送和接收操作。没准备好会阻塞，保证同时交换数据<br /><img src="/images/goinaction27.png" alt="image.png"><br />（2）有缓冲通道：buffered :&#x3D; make(chan string, 10)<br />在被接收前能存储一个或者多个值的通道，通道中没有要接收的值时，才会阻塞。<br /><img src="/images/goinaction28.png" alt="image.png"><br />close(chan) 关闭通道后，goroutine依然可以从通道接收数据，但是不能再向通道里发送数据 -&gt; 不会有数据丢失</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how to use a buffered</span></span><br><span class="line"><span class="comment">// channel to work on multiple tasks with a predefined number</span></span><br><span class="line"><span class="comment">// of goroutines.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    numberGoroutines = <span class="number">4</span>  <span class="comment">// Number of goroutines to use.</span></span><br><span class="line">    taskLoad         = <span class="number">10</span> <span class="comment">// Amount of work to process.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wg is used to wait for the program to finish.</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// init is called to initialize the package by the</span></span><br><span class="line"><span class="comment">// Go runtime prior to any other code being executed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Seed the random number generator.</span></span><br><span class="line">    rand.Seed(time.Now().Unix())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for all Go programs.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a buffered channel to manage the task load.</span></span><br><span class="line">    tasks := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, taskLoad)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Launch goroutines to handle the work.</span></span><br><span class="line">    wg.Add(numberGoroutines)</span><br><span class="line">    <span class="keyword">for</span> gr := <span class="number">1</span>; gr &lt;= numberGoroutines; gr++ &#123;</span><br><span class="line">        <span class="keyword">go</span> worker(tasks, gr)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a bunch of work to get done.</span></span><br><span class="line">    <span class="keyword">for</span> post := <span class="number">1</span>; post &lt;= taskLoad; post++ &#123;</span><br><span class="line">        tasks &lt;- fmt.Sprintf(<span class="string">&quot;Task : %d&quot;</span>, post)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Close the channel so the goroutines will quit</span></span><br><span class="line">    <span class="comment">// when all the work is done.</span></span><br><span class="line">    <span class="built_in">close</span>(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wait for all the work to get done.</span></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// worker is launched as a goroutine to process work from</span></span><br><span class="line"><span class="comment">// the buffered channel.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tasks <span class="keyword">chan</span> <span class="type">string</span>, worker <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Report that we just returned.</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// Wait for work to be assigned.</span></span><br><span class="line">        task, ok := &lt;-tasks</span><br><span class="line">        <span class="keyword">if</span> !ok &#123;</span><br><span class="line">            <span class="comment">// This means the channel is empty and closed.</span></span><br><span class="line">            fmt.Printf(<span class="string">&quot;Worker: %d : Shutting Down\n&quot;</span>, worker)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display we are starting the work.</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker: %d : Started %s\n&quot;</span>, worker, task)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Randomly wait to simulate work time.</span></span><br><span class="line">        sleep := rand.Int63n(<span class="number">100</span>)</span><br><span class="line">        time.Sleep(time.Duration(sleep) * time.Millisecond)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Display we finished the work.</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker: %d : Completed %s\n&quot;</span>, worker, task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/goinaction29.png" alt="image.png"></p>
<ul>
<li>向通道发送值 &lt;-</li>
</ul>
<p>buffered &lt;- “Gopher”</p>
<ul>
<li>从通道接收值</li>
</ul>
<p>value :&#x3D; &lt;- buffered<br><a name="QINlQ"></a></p>
<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><p><a name="hJiuQ"></a></p>
<h3 id="记录日志"><a href="#记录日志" class="headerlink" title="记录日志"></a>记录日志</h3><p><a name="JKMBx"></a></p>
<h4 id="log包"><a href="#log包" class="headerlink" title="log包"></a>log包</h4><ul>
<li>设置日志的前缀 ：log.SetPrefix(“TRACE: “)</li>
<li>设置写到日志项的信息 ： log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile)</li>
</ul>
<p>输出<br />TRACE: 2023&#x2F;06&#x2F;07 17:27:26.146249 &#x2F;mnt&#x2F;d&#x2F;code&#x2F;code-master&#x2F;chapter8&#x2F;listing03&#x2F;listing03.go:15: message<br /><img src="/images/goinaction30.png" alt="image.png"><br />iota是内置常量生成器： 1&lt;&lt;iota 每个常量声明都将1按位左移iota个位置<br />log包是多goroutine安全的，多个goroutine可以调用来自同一个日志记录器的函数，不会有写冲突，用户定制的日志器也应该满足这个性质<br />（如果没有写入需求也可以没有互斥锁 team logging repo）<br />log.Logger内部维护了互斥锁mutex<br /><img src="/images/goinaction31.png" alt="image.png"><br /><img src="/images/goinaction32.png" alt="image.png"><br><a name="iDjLU"></a></p>
<h4 id="定制的日志记录器"><a href="#定制的日志记录器" class="headerlink" title="定制的日志记录器"></a>定制的日志记录器</h4><p>需要创建Logger类型值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This sample program demonstrates how to create customized loggers.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    Trace   *log.Logger <span class="comment">// Just about anything</span></span><br><span class="line">    Info    *log.Logger <span class="comment">// Important information</span></span><br><span class="line">    Warning *log.Logger <span class="comment">// Be concerned</span></span><br><span class="line">    Error   *log.Logger <span class="comment">// Critical problem</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;errors.txt&quot;</span>,</span><br><span class="line">        os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalln(<span class="string">&quot;Failed to open error log file:&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Trace = log.New(ioutil.Discard,</span><br><span class="line">        <span class="string">&quot;TRACE: &quot;</span>,</span><br><span class="line">        log.Ldate|log.Ltime|log.Lshortfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Info = log.New(os.Stdout,</span><br><span class="line">        <span class="string">&quot;INFO: &quot;</span>,</span><br><span class="line">        log.Ldate|log.Ltime|log.Lshortfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Warning = log.New(os.Stdout,</span><br><span class="line">        <span class="string">&quot;WARNING: &quot;</span>,</span><br><span class="line">        log.Ldate|log.Ltime|log.Lshortfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Error = log.New(io.MultiWriter(file, os.Stderr),</span><br><span class="line">        <span class="string">&quot;ERROR: &quot;</span>,</span><br><span class="line">        log.Ldate|log.Ltime|log.Lshortfile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Trace.Println(<span class="string">&quot;I have something standard to say&quot;</span>)</span><br><span class="line">    Info.Println(<span class="string">&quot;Special Information&quot;</span>)</span><br><span class="line">    Warning.Println(<span class="string">&quot;There is something you need to know about&quot;</span>)</span><br><span class="line">    Error.Println(<span class="string">&quot;Something has failed&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="HP0KC"></a></p>
<h3 id="编码-x2F-解码"><a href="#编码-x2F-解码" class="headerlink" title="编码&#x2F;解码"></a>编码&#x2F;解码</h3><p><a name="Ru69I"></a></p>
<h4 id="解码json"><a href="#解码json" class="headerlink" title="解码json"></a>解码json</h4><p>http.Get() ，json unmarshal和 shouldbindjson（gin 框架中的 JSON 请求参数解析器，可以将客户端发送的 JSON 数据解析成 Go 结构体类型）都是将 JSON 数据解码为 Go 结构体的方法，但它们之间存在一些差异。<br><a name="aCjso"></a></p>
<h5 id="json-NewDecoder-resp-Body-Decode-amp-gr"><a href="#json-NewDecoder-resp-Body-Decode-amp-gr" class="headerlink" title="json.NewDecoder(resp.Body).Decode(&amp;gr)"></a>json.NewDecoder(resp.Body).Decode(&amp;gr)</h5><p>使用了 json.Decoder 类型来处理 JSON 数据，并允许我们从输入流中逐步读取数据。这对于处理大型 JSON 数据或需要实时处理输入数据的情况非常有用。例如，在以下示例中，我们使用 http.Response 中的 Body 字段并使用 json.Decoder 类型从输入流中逐步读取 JSON 数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://jsonplaceholder.typicode.com/users/1&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> user User</span><br><span class="line">    decoder := json.NewDecoder(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err := decoder.Decode(&amp;user); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(user.Name, user.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="K5ZMY"></a></p>
<h5 id="json-Unmarshal-data-amp-gr"><a href="#json-Unmarshal-data-amp-gr" class="headerlink" title="json.Unmarshal(data, &amp;gr)"></a>json.Unmarshal(data, &amp;gr)</h5><p>函数接受一个字节数组或字符串作为输入，将其解析为指定类型的结构体，并将结果存储在传入的结构体变量中。例如，在以下示例中，我们使用 json.Unmarshal() 将 JSON 数据解码为 Person 结构体：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := []<span class="type">byte</span>(<span class="string">`&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;`</span>)</span><br><span class="line">    <span class="keyword">var</span> person Person</span><br><span class="line">    err := json.Unmarshal(data, &amp;person)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(person.Name, person.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>var c map[string]interface{}<br />err :&#x3D; json.Unmarshal([]byte(JSON), &amp;c)<br />如果反序列化到map变量，值是interface{}类型（map[string]interface{})[“home”]）<br />原因：JSON 的数据类型是动态的，可以是字符串、数字、布尔值、数组、对象等多种类型，而在 Go 中 map 的值类型必须是固定的。因此，在将 JSON 数据反序列化为 Go map 变量时，需要将值类型设置为 interface{} 类型，以容纳任何可能的 JSON 数据类型。<br><a name="lyBTF"></a></p>
<h5 id="Gin框架中的ShouldBindJSON"><a href="#Gin框架中的ShouldBindJSON" class="headerlink" title="Gin框架中的ShouldBindJSON()"></a>Gin框架中的ShouldBindJSON()</h5><p>一个 Gin 框架提供的函数，用于将 HTTP 请求正文中的 JSON 数据绑定到指定的结构体中。如果请求正文中的 JSON 数据无法绑定到结构体，ShouldBindJSON() 会返回一个错误。例如，在以下示例中，我们使用 ShouldBindJSON() 将请求正文中的 JSON 数据绑定到 Person 结构体：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.POST(<span class="string">&quot;/person&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> person Person</span><br><span class="line">        <span class="keyword">if</span> err := c.ShouldBindJSON(&amp;person); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.JSON(http.StatusOK, person)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们定义了一个名为 Person 的结构体类型，并使用 Gin 框架创建了一个 HTTP POST 路由来处理 JSON 数据。在路由处理程序中，我们使用 ShouldBindJSON() 函数将请求正文中的 JSON 数据绑定到 Person 结构体。如果绑定失败，则返回一个错误响应</p>
<p>type User struct {<br />    Name string <code>json:&quot;name&quot;</code><br />    Age  int    <code>json:&quot;age&quot;</code><br />}</p>
<ul>
<li>单引号声明的字符串被称作标签，将json文档和结构类型里的字段映射起来</li>
<li>没有标签的话，解码和编码会以大小写无关方式与字段名字匹配</li>
<li>若无法匹配，对应结构类型的字段就包含零值</li>
</ul>
<p>http.Get() （从互联网上获取数据，例如从 Web 服务器或 API 端点获取数据）和io.ReadAll()（将响应体的所有内容读取到一个字节数组中）函数会读取 Request.Body 中的所有数据并将其存储在内存中，这意味着连接仍然保持打开状态。如果不显式关闭请求体，则会导致客户端和服务器之间的连接一直打开，直到连接超时或客户端关闭连接为止<br /><img src="/images/goinaction33.png" alt="image.png"><br /><img src="/images/goinaction34.png" alt="image.png"><br />x.(T) 将接口类型转换为目标类型<br><a name="qOx07"></a></p>
<h4 id="编码json"><a href="#编码json" class="headerlink" title="编码json"></a>编码json</h4><p>json.NewEncoder()、json.Marshal() 和 Gin 框架中的 JSON() 函数都是用于将 Go 结构体类型编码为 JSON 数据的方法，但它们之间存在一些差异。<br><a name="N0Dyo"></a></p>
<h5 id="json-NewEncoder-："><a href="#json-NewEncoder-：" class="headerlink" title="json.NewEncoder()："></a>json.NewEncoder()：</h5><p>使用 json.Encoder 类型将 Go 结构体类型编码为 JSON 数据，并允许我们逐步写入输出流。这对于需要实时处理输出数据或处理大型 JSON 数据的情况非常有用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">    encoder := json.NewEncoder(os.Stdout)</span><br><span class="line">    <span class="keyword">if</span> err := encoder.Encode(person); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以上示例中，我们定义了一个名为 Person 的结构体类型，包含两个属性：Name 和 Age。然后，我们使用 json.NewEncoder() 将 Person 结构体类型编码为 JSON 数据，并将其输出到标准输出流中。<br><a name="hPmEH"></a></p>
<h5 id="json-Marshal"><a href="#json-Marshal" class="headerlink" title="json.Marshal()"></a>json.Marshal()</h5><p>将 Go 结构体类型编码为 JSON 数据，并将其作为字节数组返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    person := Person&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">    data, err := json.Marshal(person)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="type">string</span>(data))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以上示例中，我们定义了一个名为 Person 的结构体类型，包含两个属性：Name 和 Age。然后，我们使用 json.Marshal() 将 Person 结构体类型编码为 JSON 数据，并将其存储在 data 变量中，最后打印 data 变量的内容。<br><a name="wEiLQ"></a></p>
<h5 id="Gin-框架中的-JSON-函数"><a href="#Gin-框架中的-JSON-函数" class="headerlink" title="Gin 框架中的 JSON() 函数"></a>Gin 框架中的 JSON() 函数</h5><p>将 Go 结构体类型编码为 JSON 数据，并将其发送回客户端作为 HTTP 响应。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">&quot;/person&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        person := Person&#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">        c.JSON(http.StatusOK, person)</span><br><span class="line">    &#125;)</span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在以上示例中，我们使用 Gin 框架创建了一个 HTTP GET 路由来处理请求，并使用 JSON() 函数将 Person 结构体类型编码为 JSON 数据，并将其作为响应发送回客户端。<br />对比：<br />c.PureJSON() 是一个函数，用于将一个结构体或 map 转换为 JSON 格式的字符串，并将其作为 HTTP 响应返回给客户端。与 c.JSON() 方法不同的是，c.PureJSON() 不会对数据进行 HTML 转义。这意味着如果您需要在 JSON 中包含特殊字符（例如 &lt;, &gt;, &amp;），则可以使用 c.PureJSON() 来避免这些字符被转义为 HTML 实体</p>
<p>总的来说，json.NewEncoder()、json.Marshal() 和 Gin 框架中的 JSON() 函数都是用于将 Go 结构体类型编码为 JSON 数据的方法。其中，json.NewEncoder() 对于处理大型 JSON 数据或需要实时处理输出数据的情况非常有用，而 json.Marshal() 则直接返回编码后的 JSON 字符串，而 Gin 框架中的 JSON() 函数则直接将编码后的 JSON 数据作为响应发送给客户端<br><a name="V4lDf"></a></p>
<h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>只要实现了io.Writer和io.Reader两个接口，都可以使用io包提供的所有功能，也可以用于其他包里接收这两个接口的函数及方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sample program to show how different functions from the</span></span><br><span class="line"><span class="comment">// standard library use the io.Writer interface.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main is the entry point for the application.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a Buffer value and write a string to the buffer.</span></span><br><span class="line">    <span class="comment">// Using the Write method that implements io.Writer.</span></span><br><span class="line">    <span class="keyword">var</span> b bytes.Buffer</span><br><span class="line">    b.Write([]<span class="type">byte</span>(<span class="string">&quot;Hello &quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Use Fprintf to concatenate a string to the Buffer.</span></span><br><span class="line">    <span class="comment">// Passing the address of a bytes.Buffer value for io.Writer.</span></span><br><span class="line">    fmt.Fprintf(&amp;b, <span class="string">&quot;World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>func Fprintf(w io.Writer, format string, a …any) (n int, err error)<br>Buffer实现了Writer方法 所以可以传入Fprintf函数里<br>func (b *Buffer) Write(p []byte) (n int, err error)</p>
<h1 id="测试和性能"><a href="#测试和性能" class="headerlink" title="测试和性能"></a>测试和性能</h1><p>需要遵守的规定</p>
<ul>
<li>go语言测试工具只会认为_test.go结尾的文件是测试文件</li>
</ul>
<p>（如果没有 go test命令时就会报：?       command-line-arguments  [no test files]）</p>
<ul>
<li>需要import testing 包</li>
<li>测试函数是公开函数（首字母大写），并以Test开头，必须接收testing.T类型的指针-&gt; 报告每个测试的输出和状态</li>
</ul>
<p>go test -v xxx_test.go<br />(-v 需要加入冗余选项）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">package listing01</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="string">&quot;testing&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">func <span class="title">TestDownload</span><span class="params">(t *testing.T)</span></span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go in action</tag>
      </tags>
  </entry>
</search>
